/**
 * Stripe API
 * The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2022-11-15
 * Contact: dev-platform@stripe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { TaxIdCustomer } from './taxIdCustomer';
import { TaxIdVerification1 } from './taxIdVerification1';

/**
* You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers). A customer\'s tax IDs are displayed on invoices and credit notes issued for the customer.  Related guide: [Customer Tax Identification Numbers](https://stripe.com/docs/billing/taxes/tax-ids).
*/
export class TaxId {
    /**
    * Two-letter ISO code representing the country of the tax ID.
    */
    'country': string | null;
    /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
    'created': number;
    'customer': TaxIdCustomer | null;
    /**
    * Unique identifier for the object.
    */
    'id': string;
    /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
    'livemode': boolean;
    /**
    * String representing the object\'s type. Objects of the same type share the same value.
    */
    'object': TaxId.ObjectEnum;
    /**
    * Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `bg_uic`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ph_tin`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
    */
    'type': TaxId.TypeEnum;
    /**
    * Value of the tax ID.
    */
    'value': string;
    'verification': TaxIdVerification1 | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "number"
        },
        {
            "name": "customer",
            "baseName": "customer",
            "type": "TaxIdCustomer"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "livemode",
            "baseName": "livemode",
            "type": "boolean"
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "TaxId.ObjectEnum"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "TaxId.TypeEnum"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "verification",
            "baseName": "verification",
            "type": "TaxIdVerification1"
        }    ];

    static getAttributeTypeMap() {
        return TaxId.attributeTypeMap;
    }
}

export namespace TaxId {
    export enum ObjectEnum {
        TaxId = <any> 'tax_id'
    }
    export enum TypeEnum {
        AeTrn = <any> 'ae_trn',
        AuAbn = <any> 'au_abn',
        AuArn = <any> 'au_arn',
        BgUic = <any> 'bg_uic',
        BrCnpj = <any> 'br_cnpj',
        BrCpf = <any> 'br_cpf',
        CaBn = <any> 'ca_bn',
        CaGstHst = <any> 'ca_gst_hst',
        CaPstBc = <any> 'ca_pst_bc',
        CaPstMb = <any> 'ca_pst_mb',
        CaPstSk = <any> 'ca_pst_sk',
        CaQst = <any> 'ca_qst',
        ChVat = <any> 'ch_vat',
        ClTin = <any> 'cl_tin',
        EgTin = <any> 'eg_tin',
        EsCif = <any> 'es_cif',
        EuOssVat = <any> 'eu_oss_vat',
        EuVat = <any> 'eu_vat',
        GbVat = <any> 'gb_vat',
        GeVat = <any> 'ge_vat',
        HkBr = <any> 'hk_br',
        HuTin = <any> 'hu_tin',
        IdNpwp = <any> 'id_npwp',
        IlVat = <any> 'il_vat',
        InGst = <any> 'in_gst',
        IsVat = <any> 'is_vat',
        JpCn = <any> 'jp_cn',
        JpRn = <any> 'jp_rn',
        JpTrn = <any> 'jp_trn',
        KePin = <any> 'ke_pin',
        KrBrn = <any> 'kr_brn',
        LiUid = <any> 'li_uid',
        MxRfc = <any> 'mx_rfc',
        MyFrp = <any> 'my_frp',
        MyItn = <any> 'my_itn',
        MySst = <any> 'my_sst',
        NoVat = <any> 'no_vat',
        NzGst = <any> 'nz_gst',
        PhTin = <any> 'ph_tin',
        RuInn = <any> 'ru_inn',
        RuKpp = <any> 'ru_kpp',
        SaVat = <any> 'sa_vat',
        SgGst = <any> 'sg_gst',
        SgUen = <any> 'sg_uen',
        SiTin = <any> 'si_tin',
        ThVat = <any> 'th_vat',
        TrTin = <any> 'tr_tin',
        TwVat = <any> 'tw_vat',
        UaVat = <any> 'ua_vat',
        Unknown = <any> 'unknown',
        UsEin = <any> 'us_ein',
        ZaVat = <any> 'za_vat'
    }
}
