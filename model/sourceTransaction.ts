/**
 * Stripe API
 * The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2022-11-15
 * Contact: dev-platform@stripe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { SourceTransactionAchCreditTransferData } from './sourceTransactionAchCreditTransferData';
import { SourceTransactionChfCreditTransferData } from './sourceTransactionChfCreditTransferData';
import { SourceTransactionGbpCreditTransferData } from './sourceTransactionGbpCreditTransferData';
import { SourceTransactionPaperCheckData } from './sourceTransactionPaperCheckData';
import { SourceTransactionSepaCreditTransferData } from './sourceTransactionSepaCreditTransferData';

/**
* Some payment methods have no required amount that a customer must send. Customers can be instructed to send any amount, and it can be made up of multiple transactions. As such, sources can have multiple associated transactions.
*/
export class SourceTransaction {
    'achCreditTransfer'?: SourceTransactionAchCreditTransferData;
    /**
    * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
    */
    'amount': number;
    'chfCreditTransfer'?: SourceTransactionChfCreditTransferData;
    /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
    'created': number;
    /**
    * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
    'currency': string;
    'gbpCreditTransfer'?: SourceTransactionGbpCreditTransferData;
    /**
    * Unique identifier for the object.
    */
    'id': string;
    /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
    'livemode': boolean;
    /**
    * String representing the object\'s type. Objects of the same type share the same value.
    */
    'object': SourceTransaction.ObjectEnum;
    'paperCheck'?: SourceTransactionPaperCheckData;
    'sepaCreditTransfer'?: SourceTransactionSepaCreditTransferData;
    /**
    * The ID of the source this transaction is attached to.
    */
    'source': string;
    /**
    * The status of the transaction, one of `succeeded`, `pending`, or `failed`.
    */
    'status': string;
    /**
    * The type of source this transaction is attached to.
    */
    'type': SourceTransaction.TypeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "achCreditTransfer",
            "baseName": "ach_credit_transfer",
            "type": "SourceTransactionAchCreditTransferData"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "chfCreditTransfer",
            "baseName": "chf_credit_transfer",
            "type": "SourceTransactionChfCreditTransferData"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "gbpCreditTransfer",
            "baseName": "gbp_credit_transfer",
            "type": "SourceTransactionGbpCreditTransferData"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "livemode",
            "baseName": "livemode",
            "type": "boolean"
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "SourceTransaction.ObjectEnum"
        },
        {
            "name": "paperCheck",
            "baseName": "paper_check",
            "type": "SourceTransactionPaperCheckData"
        },
        {
            "name": "sepaCreditTransfer",
            "baseName": "sepa_credit_transfer",
            "type": "SourceTransactionSepaCreditTransferData"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "SourceTransaction.TypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return SourceTransaction.attributeTypeMap;
    }
}

export namespace SourceTransaction {
    export enum ObjectEnum {
        SourceTransaction = <any> 'source_transaction'
    }
    export enum TypeEnum {
        AchCreditTransfer = <any> 'ach_credit_transfer',
        AchDebit = <any> 'ach_debit',
        Alipay = <any> 'alipay',
        Bancontact = <any> 'bancontact',
        Card = <any> 'card',
        CardPresent = <any> 'card_present',
        Eps = <any> 'eps',
        Giropay = <any> 'giropay',
        Ideal = <any> 'ideal',
        Klarna = <any> 'klarna',
        Multibanco = <any> 'multibanco',
        P24 = <any> 'p24',
        SepaDebit = <any> 'sepa_debit',
        Sofort = <any> 'sofort',
        ThreeDSecure = <any> 'three_d_secure',
        Wechat = <any> 'wechat'
    }
}
