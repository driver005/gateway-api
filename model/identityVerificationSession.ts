/**
 * Stripe API
 * The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2022-11-15
 * Contact: dev-platform@stripe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { GelatoVerificationSessionOptions } from './gelatoVerificationSessionOptions';
import { IdentityVerificationSessionLastError } from './identityVerificationSessionLastError';
import { IdentityVerificationSessionLastVerificationReport } from './identityVerificationSessionLastVerificationReport';
import { IdentityVerificationSessionRedaction } from './identityVerificationSessionRedaction';
import { IdentityVerificationSessionVerifiedOutputs } from './identityVerificationSessionVerifiedOutputs';

/**
* A VerificationSession guides you through the process of collecting and verifying the identities of your users. It contains details about the type of verification, such as what [verification check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for each verification in your system.  A VerificationSession transitions through [multiple statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through the verification flow. The VerificationSession contains the user\'s verified data after verification checks are complete.  Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
*/
export class IdentityVerificationSession {
    /**
    * The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more.
    */
    'clientSecret': string | null;
    /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
    'created': number;
    /**
    * Unique identifier for the object.
    */
    'id': string;
    'lastError': IdentityVerificationSessionLastError | null;
    'lastVerificationReport': IdentityVerificationSessionLastVerificationReport | null;
    /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
    'livemode': boolean;
    /**
    * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
    'metadata': { [key: string]: string; };
    /**
    * String representing the object\'s type. Objects of the same type share the same value.
    */
    'object': IdentityVerificationSession.ObjectEnum;
    'options': GelatoVerificationSessionOptions;
    'redaction': IdentityVerificationSessionRedaction | null;
    /**
    * Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
    */
    'status': IdentityVerificationSession.StatusEnum;
    /**
    * The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
    */
    'type': IdentityVerificationSession.TypeEnum;
    /**
    * The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.
    */
    'url': string | null;
    'verifiedOutputs': IdentityVerificationSessionVerifiedOutputs | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "clientSecret",
            "baseName": "client_secret",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "number"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "lastError",
            "baseName": "last_error",
            "type": "IdentityVerificationSessionLastError"
        },
        {
            "name": "lastVerificationReport",
            "baseName": "last_verification_report",
            "type": "IdentityVerificationSessionLastVerificationReport"
        },
        {
            "name": "livemode",
            "baseName": "livemode",
            "type": "boolean"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "IdentityVerificationSession.ObjectEnum"
        },
        {
            "name": "options",
            "baseName": "options",
            "type": "GelatoVerificationSessionOptions"
        },
        {
            "name": "redaction",
            "baseName": "redaction",
            "type": "IdentityVerificationSessionRedaction"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IdentityVerificationSession.StatusEnum"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "IdentityVerificationSession.TypeEnum"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "verifiedOutputs",
            "baseName": "verified_outputs",
            "type": "IdentityVerificationSessionVerifiedOutputs"
        }    ];

    static getAttributeTypeMap() {
        return IdentityVerificationSession.attributeTypeMap;
    }
}

export namespace IdentityVerificationSession {
    export enum ObjectEnum {
        IdentityVerificationSession = <any> 'identity.verification_session'
    }
    export enum StatusEnum {
        Canceled = <any> 'canceled',
        Processing = <any> 'processing',
        RequiresInput = <any> 'requires_input',
        Verified = <any> 'verified'
    }
    export enum TypeEnum {
        Document = <any> 'document',
        IdNumber = <any> 'id_number'
    }
}
