/**
 * Stripe API
 * The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2022-11-15
 * Contact: dev-platform@stripe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* 
*/
export class Recurring {
    /**
    * Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
    */
    'aggregateUsage': Recurring.AggregateUsageEnum;
    /**
    * The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    */
    'interval': Recurring.IntervalEnum;
    /**
    * The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
    */
    'intervalCount': number;
    /**
    * Default number of trial days when subscribing a customer to this price using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
    */
    'trialPeriodDays': number | null;
    /**
    * Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
    */
    'usageType': Recurring.UsageTypeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "aggregateUsage",
            "baseName": "aggregate_usage",
            "type": "Recurring.AggregateUsageEnum"
        },
        {
            "name": "interval",
            "baseName": "interval",
            "type": "Recurring.IntervalEnum"
        },
        {
            "name": "intervalCount",
            "baseName": "interval_count",
            "type": "number"
        },
        {
            "name": "trialPeriodDays",
            "baseName": "trial_period_days",
            "type": "number"
        },
        {
            "name": "usageType",
            "baseName": "usage_type",
            "type": "Recurring.UsageTypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return Recurring.attributeTypeMap;
    }
}

export namespace Recurring {
    export enum AggregateUsageEnum {
        LastDuringPeriod = <any> 'last_during_period',
        LastEver = <any> 'last_ever',
        Max = <any> 'max',
        Sum = <any> 'sum'
    }
    export enum IntervalEnum {
        Day = <any> 'day',
        Month = <any> 'month',
        Week = <any> 'week',
        Year = <any> 'year'
    }
    export enum UsageTypeEnum {
        Licensed = <any> 'licensed',
        Metered = <any> 'metered'
    }
}
