/**
 * Stripe API
 * The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2022-11-15
 * Contact: dev-platform@stripe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { BankAccountAccount } from './bankAccountAccount';
import { BankAccountCustomer } from './bankAccountCustomer';

/**
* These bank accounts are payment methods on `Customer` objects.  On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts). They can be bank accounts or debit cards as well, and are documented in the links above.  Related guide: [Bank Debits and Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
*/
export class BankAccount {
    'account'?: BankAccountAccount | null;
    /**
    * The name of the person or business that owns the bank account.
    */
    'accountHolderName': string | null;
    /**
    * The type of entity that holds the account. This can be either `individual` or `company`.
    */
    'accountHolderType': string | null;
    /**
    * The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
    */
    'accountType': string | null;
    /**
    * A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.
    */
    'availablePayoutMethods'?: Array<BankAccount.AvailablePayoutMethodsEnum>;
    /**
    * Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
    */
    'bankName': string | null;
    /**
    * Two-letter ISO code representing the country the bank account is located in.
    */
    'country': string;
    /**
    * Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
    */
    'currency': string;
    'customer'?: BankAccountCustomer | null;
    /**
    * Whether this bank account is the default external account for its currency.
    */
    'defaultForCurrency'?: boolean | null;
    /**
    * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    */
    'fingerprint': string | null;
    /**
    * Unique identifier for the object.
    */
    'id': string;
    /**
    * The last four digits of the bank account number.
    */
    'last4': string;
    /**
    * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
    'metadata'?: { [key: string]: string; } | null;
    /**
    * String representing the object\'s type. Objects of the same type share the same value.
    */
    'object': BankAccount.ObjectEnum;
    /**
    * The routing transit number for the bank account.
    */
    'routingNumber': string | null;
    /**
    * For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn\'t had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isnâ€™t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we\'ll set the status to `errored` and will not continue to send transfers until the bank details are updated.  For external accounts, possible values are `new` and `errored`. Validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
    */
    'status': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "account",
            "baseName": "account",
            "type": "BankAccountAccount"
        },
        {
            "name": "accountHolderName",
            "baseName": "account_holder_name",
            "type": "string"
        },
        {
            "name": "accountHolderType",
            "baseName": "account_holder_type",
            "type": "string"
        },
        {
            "name": "accountType",
            "baseName": "account_type",
            "type": "string"
        },
        {
            "name": "availablePayoutMethods",
            "baseName": "available_payout_methods",
            "type": "Array<BankAccount.AvailablePayoutMethodsEnum>"
        },
        {
            "name": "bankName",
            "baseName": "bank_name",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "customer",
            "baseName": "customer",
            "type": "BankAccountCustomer"
        },
        {
            "name": "defaultForCurrency",
            "baseName": "default_for_currency",
            "type": "boolean"
        },
        {
            "name": "fingerprint",
            "baseName": "fingerprint",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "last4",
            "baseName": "last4",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "BankAccount.ObjectEnum"
        },
        {
            "name": "routingNumber",
            "baseName": "routing_number",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return BankAccount.attributeTypeMap;
    }
}

export namespace BankAccount {
    export enum AvailablePayoutMethodsEnum {
        Instant = <any> 'instant',
        Standard = <any> 'standard'
    }
    export enum ObjectEnum {
        BankAccount = <any> 'bank_account'
    }
}
