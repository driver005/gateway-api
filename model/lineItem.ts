/**
 * Stripe API
 * The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2022-11-15
 * Contact: dev-platform@stripe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { DiscountsResourceDiscountAmount } from './discountsResourceDiscountAmount';
import { InvoiceLineItemPeriod } from './invoiceLineItemPeriod';
import { InvoiceTaxAmount } from './invoiceTaxAmount';
import { InvoiceitemDiscountsInner } from './invoiceitemDiscountsInner';
import { LineItemPlan } from './lineItemPlan';
import { LineItemPrice } from './lineItemPrice';
import { LineItemProrationDetails } from './lineItemProrationDetails';
import { TaxRate } from './taxRate';

/**
* 
*/
export class LineItem {
    /**
    * The amount, in %s.
    */
    'amount': number;
    /**
    * The integer amount in %s representing the amount for this line item, excluding all tax and discounts.
    */
    'amountExcludingTax': number | null;
    /**
    * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
    'currency': string;
    /**
    * An arbitrary string attached to the object. Often useful for displaying to users.
    */
    'description': string | null;
    /**
    * The amount of discount calculated per discount for this line item.
    */
    'discountAmounts': Array<DiscountsResourceDiscountAmount> | null;
    /**
    * If true, discounts will apply to this line item. Always false for prorations.
    */
    'discountable': boolean;
    /**
    * The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
    */
    'discounts': Array<InvoiceitemDiscountsInner> | null;
    /**
    * Unique identifier for the object.
    */
    'id': string;
    /**
    * The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any.
    */
    'invoiceItem'?: string;
    /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
    'livemode': boolean;
    /**
    * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created.
    */
    'metadata': { [key: string]: string; };
    /**
    * String representing the object\'s type. Objects of the same type share the same value.
    */
    'object': LineItem.ObjectEnum;
    'period': InvoiceLineItemPeriod;
    'plan': LineItemPlan | null;
    'price': LineItemPrice | null;
    /**
    * Whether this is a proration.
    */
    'proration': boolean;
    'prorationDetails': LineItemProrationDetails | null;
    /**
    * The quantity of the subscription, if the line item is a subscription or a proration.
    */
    'quantity': number | null;
    /**
    * The subscription that the invoice item pertains to, if any.
    */
    'subscription': string | null;
    /**
    * The subscription item that generated this line item. Left empty if the line item is not an explicit result of a subscription.
    */
    'subscriptionItem'?: string;
    /**
    * The amount of tax calculated per tax rate for this line item
    */
    'taxAmounts'?: Array<InvoiceTaxAmount>;
    /**
    * The tax rates which apply to the line item.
    */
    'taxRates'?: Array<TaxRate>;
    /**
    * A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
    */
    'type': LineItem.TypeEnum;
    /**
    * The amount in %s representing the unit amount for this line item, excluding all tax and discounts.
    */
    'unitAmountExcludingTax': string | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "amountExcludingTax",
            "baseName": "amount_excluding_tax",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "discountAmounts",
            "baseName": "discount_amounts",
            "type": "Array<DiscountsResourceDiscountAmount>"
        },
        {
            "name": "discountable",
            "baseName": "discountable",
            "type": "boolean"
        },
        {
            "name": "discounts",
            "baseName": "discounts",
            "type": "Array<InvoiceitemDiscountsInner>"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "invoiceItem",
            "baseName": "invoice_item",
            "type": "string"
        },
        {
            "name": "livemode",
            "baseName": "livemode",
            "type": "boolean"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "LineItem.ObjectEnum"
        },
        {
            "name": "period",
            "baseName": "period",
            "type": "InvoiceLineItemPeriod"
        },
        {
            "name": "plan",
            "baseName": "plan",
            "type": "LineItemPlan"
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "LineItemPrice"
        },
        {
            "name": "proration",
            "baseName": "proration",
            "type": "boolean"
        },
        {
            "name": "prorationDetails",
            "baseName": "proration_details",
            "type": "LineItemProrationDetails"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "subscription",
            "baseName": "subscription",
            "type": "string"
        },
        {
            "name": "subscriptionItem",
            "baseName": "subscription_item",
            "type": "string"
        },
        {
            "name": "taxAmounts",
            "baseName": "tax_amounts",
            "type": "Array<InvoiceTaxAmount>"
        },
        {
            "name": "taxRates",
            "baseName": "tax_rates",
            "type": "Array<TaxRate>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "LineItem.TypeEnum"
        },
        {
            "name": "unitAmountExcludingTax",
            "baseName": "unit_amount_excluding_tax",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return LineItem.attributeTypeMap;
    }
}

export namespace LineItem {
    export enum ObjectEnum {
        LineItem = <any> 'line_item'
    }
    export enum TypeEnum {
        Invoiceitem = <any> 'invoiceitem',
        Subscription = <any> 'subscription'
    }
}
