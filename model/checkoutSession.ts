/**
 * Stripe API
 * The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2022-11-15
 * Contact: dev-platform@stripe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CheckoutSessionAfterExpiration } from './checkoutSessionAfterExpiration';
import { CheckoutSessionConsent } from './checkoutSessionConsent';
import { CheckoutSessionConsentCollection } from './checkoutSessionConsentCollection';
import { CheckoutSessionCustomer } from './checkoutSessionCustomer';
import { CheckoutSessionCustomerDetails } from './checkoutSessionCustomerDetails';
import { CheckoutSessionInvoice } from './checkoutSessionInvoice';
import { CheckoutSessionInvoiceCreation } from './checkoutSessionInvoiceCreation';
import { CheckoutSessionPaymentIntent } from './checkoutSessionPaymentIntent';
import { CheckoutSessionPaymentLink } from './checkoutSessionPaymentLink';
import { CheckoutSessionPaymentMethodOptions1 } from './checkoutSessionPaymentMethodOptions1';
import { CheckoutSessionSetupIntent } from './checkoutSessionSetupIntent';
import { CheckoutSessionShippingAddressCollection } from './checkoutSessionShippingAddressCollection';
import { CheckoutSessionShippingCost } from './checkoutSessionShippingCost';
import { CheckoutSessionShippingDetails } from './checkoutSessionShippingDetails';
import { CheckoutSessionSubscription } from './checkoutSessionSubscription';
import { CheckoutSessionTotalDetails } from './checkoutSessionTotalDetails';
import { PaymentPagesCheckoutSessionAutomaticTax } from './paymentPagesCheckoutSessionAutomaticTax';
import { PaymentPagesCheckoutSessionCustomFields } from './paymentPagesCheckoutSessionCustomFields';
import { PaymentPagesCheckoutSessionCustomText } from './paymentPagesCheckoutSessionCustomText';
import { PaymentPagesCheckoutSessionListLineItems1 } from './paymentPagesCheckoutSessionListLineItems1';
import { PaymentPagesCheckoutSessionPhoneNumberCollection } from './paymentPagesCheckoutSessionPhoneNumberCollection';
import { PaymentPagesCheckoutSessionShippingOption } from './paymentPagesCheckoutSessionShippingOption';
import { PaymentPagesCheckoutSessionTaxIdCollection } from './paymentPagesCheckoutSessionTaxIdCollection';

/**
* A Checkout Session represents your customer\'s session as they pay for one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout) or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a new Session each time your customer attempts to pay.  Once payment is successful, the Checkout Session will contain a reference to the [Customer](https://stripe.com/docs/api/customers), and either the successful [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active [Subscription](https://stripe.com/docs/api/subscriptions).  You can create a Checkout Session on your server and redirect to its URL to begin Checkout.  Related guide: [Checkout Quickstart](https://stripe.com/docs/checkout/quickstart).
*/
export class CheckoutSession {
    'afterExpiration': CheckoutSessionAfterExpiration | null;
    /**
    * Enables user redeemable promotion codes.
    */
    'allowPromotionCodes': boolean | null;
    /**
    * Total of all items before discounts or taxes are applied.
    */
    'amountSubtotal': number | null;
    /**
    * Total of all items after discounts and taxes are applied.
    */
    'amountTotal': number | null;
    'automaticTax': PaymentPagesCheckoutSessionAutomaticTax;
    /**
    * Describes whether Checkout should collect the customer\'s billing address.
    */
    'billingAddressCollection': CheckoutSession.BillingAddressCollectionEnum;
    /**
    * If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website.
    */
    'cancelUrl': string | null;
    /**
    * A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the Session with your internal systems.
    */
    'clientReferenceId': string | null;
    'consent': CheckoutSessionConsent | null;
    'consentCollection': CheckoutSessionConsentCollection | null;
    /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
    'created': number;
    /**
    * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
    'currency': string | null;
    /**
    * Collect additional information from your customer using custom fields. Up to 2 fields are supported.
    */
    'customFields': Array<PaymentPagesCheckoutSessionCustomFields>;
    'customText': PaymentPagesCheckoutSessionCustomText;
    'customer': CheckoutSessionCustomer | null;
    /**
    * Configure whether a Checkout Session creates a Customer when the Checkout Session completes.
    */
    'customerCreation': CheckoutSession.CustomerCreationEnum;
    'customerDetails': CheckoutSessionCustomerDetails | null;
    /**
    * If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once the payment flow is complete, use the `customer` attribute.
    */
    'customerEmail': string | null;
    /**
    * The timestamp at which the Checkout Session will expire.
    */
    'expiresAt': number;
    /**
    * Unique identifier for the object.
    */
    'id': string;
    'invoice': CheckoutSessionInvoice | null;
    'invoiceCreation': CheckoutSessionInvoiceCreation | null;
    'lineItems'?: PaymentPagesCheckoutSessionListLineItems1;
    /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
    'livemode': boolean;
    /**
    * The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser\'s locale is used.
    */
    'locale': CheckoutSession.LocaleEnum;
    /**
    * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
    'metadata': { [key: string]: string; } | null;
    /**
    * The mode of the Checkout Session.
    */
    'mode': CheckoutSession.ModeEnum;
    /**
    * String representing the object\'s type. Objects of the same type share the same value.
    */
    'object': CheckoutSession.ObjectEnum;
    'paymentIntent': CheckoutSessionPaymentIntent | null;
    'paymentLink': CheckoutSessionPaymentLink | null;
    /**
    * Configure whether a Checkout Session should collect a payment method.
    */
    'paymentMethodCollection': CheckoutSession.PaymentMethodCollectionEnum;
    'paymentMethodOptions': CheckoutSessionPaymentMethodOptions1 | null;
    /**
    * A list of the types of payment methods (e.g. card) this Checkout Session is allowed to accept.
    */
    'paymentMethodTypes': Array<string>;
    /**
    * The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`. You can use this value to decide when to fulfill your customer\'s order.
    */
    'paymentStatus': CheckoutSession.PaymentStatusEnum;
    'phoneNumberCollection'?: PaymentPagesCheckoutSessionPhoneNumberCollection;
    /**
    * The ID of the original expired Checkout Session that triggered the recovery flow.
    */
    'recoveredFrom': string | null;
    'setupIntent': CheckoutSessionSetupIntent | null;
    'shippingAddressCollection': CheckoutSessionShippingAddressCollection | null;
    'shippingCost': CheckoutSessionShippingCost | null;
    'shippingDetails': CheckoutSessionShippingDetails | null;
    /**
    * The shipping rate options applied to this Session.
    */
    'shippingOptions': Array<PaymentPagesCheckoutSessionShippingOption>;
    /**
    * The status of the Checkout Session, one of `open`, `complete`, or `expired`.
    */
    'status': CheckoutSession.StatusEnum;
    /**
    * Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. `submit_type` can only be specified on Checkout Sessions in `payment` mode, but not Checkout Sessions in `subscription` or `setup` mode.
    */
    'submitType': CheckoutSession.SubmitTypeEnum;
    'subscription': CheckoutSessionSubscription | null;
    /**
    * The URL the customer will be directed to after the payment or subscription creation is successful.
    */
    'successUrl': string;
    'taxIdCollection'?: PaymentPagesCheckoutSessionTaxIdCollection;
    'totalDetails': CheckoutSessionTotalDetails | null;
    /**
    * The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.` This value is only present when the session is active.
    */
    'url': string | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "afterExpiration",
            "baseName": "after_expiration",
            "type": "CheckoutSessionAfterExpiration"
        },
        {
            "name": "allowPromotionCodes",
            "baseName": "allow_promotion_codes",
            "type": "boolean"
        },
        {
            "name": "amountSubtotal",
            "baseName": "amount_subtotal",
            "type": "number"
        },
        {
            "name": "amountTotal",
            "baseName": "amount_total",
            "type": "number"
        },
        {
            "name": "automaticTax",
            "baseName": "automatic_tax",
            "type": "PaymentPagesCheckoutSessionAutomaticTax"
        },
        {
            "name": "billingAddressCollection",
            "baseName": "billing_address_collection",
            "type": "CheckoutSession.BillingAddressCollectionEnum"
        },
        {
            "name": "cancelUrl",
            "baseName": "cancel_url",
            "type": "string"
        },
        {
            "name": "clientReferenceId",
            "baseName": "client_reference_id",
            "type": "string"
        },
        {
            "name": "consent",
            "baseName": "consent",
            "type": "CheckoutSessionConsent"
        },
        {
            "name": "consentCollection",
            "baseName": "consent_collection",
            "type": "CheckoutSessionConsentCollection"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "customFields",
            "baseName": "custom_fields",
            "type": "Array<PaymentPagesCheckoutSessionCustomFields>"
        },
        {
            "name": "customText",
            "baseName": "custom_text",
            "type": "PaymentPagesCheckoutSessionCustomText"
        },
        {
            "name": "customer",
            "baseName": "customer",
            "type": "CheckoutSessionCustomer"
        },
        {
            "name": "customerCreation",
            "baseName": "customer_creation",
            "type": "CheckoutSession.CustomerCreationEnum"
        },
        {
            "name": "customerDetails",
            "baseName": "customer_details",
            "type": "CheckoutSessionCustomerDetails"
        },
        {
            "name": "customerEmail",
            "baseName": "customer_email",
            "type": "string"
        },
        {
            "name": "expiresAt",
            "baseName": "expires_at",
            "type": "number"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "invoice",
            "baseName": "invoice",
            "type": "CheckoutSessionInvoice"
        },
        {
            "name": "invoiceCreation",
            "baseName": "invoice_creation",
            "type": "CheckoutSessionInvoiceCreation"
        },
        {
            "name": "lineItems",
            "baseName": "line_items",
            "type": "PaymentPagesCheckoutSessionListLineItems1"
        },
        {
            "name": "livemode",
            "baseName": "livemode",
            "type": "boolean"
        },
        {
            "name": "locale",
            "baseName": "locale",
            "type": "CheckoutSession.LocaleEnum"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "CheckoutSession.ModeEnum"
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "CheckoutSession.ObjectEnum"
        },
        {
            "name": "paymentIntent",
            "baseName": "payment_intent",
            "type": "CheckoutSessionPaymentIntent"
        },
        {
            "name": "paymentLink",
            "baseName": "payment_link",
            "type": "CheckoutSessionPaymentLink"
        },
        {
            "name": "paymentMethodCollection",
            "baseName": "payment_method_collection",
            "type": "CheckoutSession.PaymentMethodCollectionEnum"
        },
        {
            "name": "paymentMethodOptions",
            "baseName": "payment_method_options",
            "type": "CheckoutSessionPaymentMethodOptions1"
        },
        {
            "name": "paymentMethodTypes",
            "baseName": "payment_method_types",
            "type": "Array<string>"
        },
        {
            "name": "paymentStatus",
            "baseName": "payment_status",
            "type": "CheckoutSession.PaymentStatusEnum"
        },
        {
            "name": "phoneNumberCollection",
            "baseName": "phone_number_collection",
            "type": "PaymentPagesCheckoutSessionPhoneNumberCollection"
        },
        {
            "name": "recoveredFrom",
            "baseName": "recovered_from",
            "type": "string"
        },
        {
            "name": "setupIntent",
            "baseName": "setup_intent",
            "type": "CheckoutSessionSetupIntent"
        },
        {
            "name": "shippingAddressCollection",
            "baseName": "shipping_address_collection",
            "type": "CheckoutSessionShippingAddressCollection"
        },
        {
            "name": "shippingCost",
            "baseName": "shipping_cost",
            "type": "CheckoutSessionShippingCost"
        },
        {
            "name": "shippingDetails",
            "baseName": "shipping_details",
            "type": "CheckoutSessionShippingDetails"
        },
        {
            "name": "shippingOptions",
            "baseName": "shipping_options",
            "type": "Array<PaymentPagesCheckoutSessionShippingOption>"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "CheckoutSession.StatusEnum"
        },
        {
            "name": "submitType",
            "baseName": "submit_type",
            "type": "CheckoutSession.SubmitTypeEnum"
        },
        {
            "name": "subscription",
            "baseName": "subscription",
            "type": "CheckoutSessionSubscription"
        },
        {
            "name": "successUrl",
            "baseName": "success_url",
            "type": "string"
        },
        {
            "name": "taxIdCollection",
            "baseName": "tax_id_collection",
            "type": "PaymentPagesCheckoutSessionTaxIdCollection"
        },
        {
            "name": "totalDetails",
            "baseName": "total_details",
            "type": "CheckoutSessionTotalDetails"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return CheckoutSession.attributeTypeMap;
    }
}

export namespace CheckoutSession {
    export enum BillingAddressCollectionEnum {
        Auto = <any> 'auto',
        Required = <any> 'required'
    }
    export enum CustomerCreationEnum {
        Always = <any> 'always',
        IfRequired = <any> 'if_required'
    }
    export enum LocaleEnum {
        Auto = <any> 'auto',
        Bg = <any> 'bg',
        Cs = <any> 'cs',
        Da = <any> 'da',
        De = <any> 'de',
        El = <any> 'el',
        En = <any> 'en',
        EnGb = <any> 'en-GB',
        Es = <any> 'es',
        Es419 = <any> 'es-419',
        Et = <any> 'et',
        Fi = <any> 'fi',
        Fil = <any> 'fil',
        Fr = <any> 'fr',
        FrCa = <any> 'fr-CA',
        Hr = <any> 'hr',
        Hu = <any> 'hu',
        Id = <any> 'id',
        It = <any> 'it',
        Ja = <any> 'ja',
        Ko = <any> 'ko',
        Lt = <any> 'lt',
        Lv = <any> 'lv',
        Ms = <any> 'ms',
        Mt = <any> 'mt',
        Nb = <any> 'nb',
        Nl = <any> 'nl',
        Pl = <any> 'pl',
        Pt = <any> 'pt',
        PtBr = <any> 'pt-BR',
        Ro = <any> 'ro',
        Ru = <any> 'ru',
        Sk = <any> 'sk',
        Sl = <any> 'sl',
        Sv = <any> 'sv',
        Th = <any> 'th',
        Tr = <any> 'tr',
        Vi = <any> 'vi',
        Zh = <any> 'zh',
        ZhHk = <any> 'zh-HK',
        ZhTw = <any> 'zh-TW'
    }
    export enum ModeEnum {
        Payment = <any> 'payment',
        Setup = <any> 'setup',
        Subscription = <any> 'subscription'
    }
    export enum ObjectEnum {
        CheckoutSession = <any> 'checkout.session'
    }
    export enum PaymentMethodCollectionEnum {
        Always = <any> 'always',
        IfRequired = <any> 'if_required'
    }
    export enum PaymentStatusEnum {
        NoPaymentRequired = <any> 'no_payment_required',
        Paid = <any> 'paid',
        Unpaid = <any> 'unpaid'
    }
    export enum StatusEnum {
        Complete = <any> 'complete',
        Expired = <any> 'expired',
        Open = <any> 'open'
    }
    export enum SubmitTypeEnum {
        Auto = <any> 'auto',
        Book = <any> 'book',
        Donate = <any> 'donate',
        Pay = <any> 'pay'
    }
}
