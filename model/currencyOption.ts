/**
 * Stripe API
 * The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2022-11-15
 * Contact: dev-platform@stripe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CurrencyOptionCustomUnitAmount } from './currencyOptionCustomUnitAmount';
import { PriceTier } from './priceTier';

/**
* 
*/
export class CurrencyOption {
    'customUnitAmount': CurrencyOptionCustomUnitAmount | null;
    /**
    * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
    */
    'taxBehavior': CurrencyOption.TaxBehaviorEnum;
    /**
    * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    */
    'tiers'?: Array<PriceTier>;
    /**
    * The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
    */
    'unitAmount': number | null;
    /**
    * The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
    */
    'unitAmountDecimal': string | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "customUnitAmount",
            "baseName": "custom_unit_amount",
            "type": "CurrencyOptionCustomUnitAmount"
        },
        {
            "name": "taxBehavior",
            "baseName": "tax_behavior",
            "type": "CurrencyOption.TaxBehaviorEnum"
        },
        {
            "name": "tiers",
            "baseName": "tiers",
            "type": "Array<PriceTier>"
        },
        {
            "name": "unitAmount",
            "baseName": "unit_amount",
            "type": "number"
        },
        {
            "name": "unitAmountDecimal",
            "baseName": "unit_amount_decimal",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return CurrencyOption.attributeTypeMap;
    }
}

export namespace CurrencyOption {
    export enum TaxBehaviorEnum {
        Exclusive = <any> 'exclusive',
        Inclusive = <any> 'inclusive',
        Unspecified = <any> 'unspecified'
    }
}
