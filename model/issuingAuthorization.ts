/**
 * Stripe API
 * The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2022-11-15
 * Contact: dev-platform@stripe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { BalanceTransaction } from './balanceTransaction';
import { IssuingAuthorizationAmountDetails1 } from './issuingAuthorizationAmountDetails1';
import { IssuingAuthorizationCardholder } from './issuingAuthorizationCardholder';
import { IssuingAuthorizationMerchantData } from './issuingAuthorizationMerchantData';
import { IssuingAuthorizationNetworkData1 } from './issuingAuthorizationNetworkData1';
import { IssuingAuthorizationPendingRequest1 } from './issuingAuthorizationPendingRequest1';
import { IssuingAuthorizationRequest } from './issuingAuthorizationRequest';
import { IssuingAuthorizationTreasury1 } from './issuingAuthorizationTreasury1';
import { IssuingAuthorizationVerificationData } from './issuingAuthorizationVerificationData';
import { IssuingCard } from './issuingCard';
import { IssuingTransaction } from './issuingTransaction';

/**
* When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization` object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the purchase to be completed successfully.  Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
*/
export class IssuingAuthorization {
    /**
    * The total amount that was authorized or rejected. This amount is in the card\'s currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    */
    'amount': number;
    'amountDetails': IssuingAuthorizationAmountDetails1 | null;
    /**
    * Whether the authorization has been approved.
    */
    'approved': boolean;
    /**
    * How the card details were provided.
    */
    'authorizationMethod': IssuingAuthorization.AuthorizationMethodEnum;
    /**
    * List of balance transactions associated with this authorization.
    */
    'balanceTransactions': Array<BalanceTransaction>;
    'card': IssuingCard;
    'cardholder': IssuingAuthorizationCardholder | null;
    /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
    'created': number;
    /**
    * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
    'currency': string;
    /**
    * Unique identifier for the object.
    */
    'id': string;
    /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
    'livemode': boolean;
    /**
    * The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    */
    'merchantAmount': number;
    /**
    * The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
    'merchantCurrency': string;
    'merchantData': IssuingAuthorizationMerchantData;
    /**
    * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
    'metadata': { [key: string]: string; };
    'networkData': IssuingAuthorizationNetworkData1 | null;
    /**
    * String representing the object\'s type. Objects of the same type share the same value.
    */
    'object': IssuingAuthorization.ObjectEnum;
    'pendingRequest': IssuingAuthorizationPendingRequest1 | null;
    /**
    * History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined.
    */
    'requestHistory': Array<IssuingAuthorizationRequest>;
    /**
    * The current status of the authorization in its lifecycle.
    */
    'status': IssuingAuthorization.StatusEnum;
    /**
    * List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
    */
    'transactions': Array<IssuingTransaction>;
    'treasury'?: IssuingAuthorizationTreasury1 | null;
    'verificationData': IssuingAuthorizationVerificationData;
    /**
    * The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
    */
    'wallet': string | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "amountDetails",
            "baseName": "amount_details",
            "type": "IssuingAuthorizationAmountDetails1"
        },
        {
            "name": "approved",
            "baseName": "approved",
            "type": "boolean"
        },
        {
            "name": "authorizationMethod",
            "baseName": "authorization_method",
            "type": "IssuingAuthorization.AuthorizationMethodEnum"
        },
        {
            "name": "balanceTransactions",
            "baseName": "balance_transactions",
            "type": "Array<BalanceTransaction>"
        },
        {
            "name": "card",
            "baseName": "card",
            "type": "IssuingCard"
        },
        {
            "name": "cardholder",
            "baseName": "cardholder",
            "type": "IssuingAuthorizationCardholder"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "livemode",
            "baseName": "livemode",
            "type": "boolean"
        },
        {
            "name": "merchantAmount",
            "baseName": "merchant_amount",
            "type": "number"
        },
        {
            "name": "merchantCurrency",
            "baseName": "merchant_currency",
            "type": "string"
        },
        {
            "name": "merchantData",
            "baseName": "merchant_data",
            "type": "IssuingAuthorizationMerchantData"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "networkData",
            "baseName": "network_data",
            "type": "IssuingAuthorizationNetworkData1"
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "IssuingAuthorization.ObjectEnum"
        },
        {
            "name": "pendingRequest",
            "baseName": "pending_request",
            "type": "IssuingAuthorizationPendingRequest1"
        },
        {
            "name": "requestHistory",
            "baseName": "request_history",
            "type": "Array<IssuingAuthorizationRequest>"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "IssuingAuthorization.StatusEnum"
        },
        {
            "name": "transactions",
            "baseName": "transactions",
            "type": "Array<IssuingTransaction>"
        },
        {
            "name": "treasury",
            "baseName": "treasury",
            "type": "IssuingAuthorizationTreasury1"
        },
        {
            "name": "verificationData",
            "baseName": "verification_data",
            "type": "IssuingAuthorizationVerificationData"
        },
        {
            "name": "wallet",
            "baseName": "wallet",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IssuingAuthorization.attributeTypeMap;
    }
}

export namespace IssuingAuthorization {
    export enum AuthorizationMethodEnum {
        Chip = <any> 'chip',
        Contactless = <any> 'contactless',
        KeyedIn = <any> 'keyed_in',
        Online = <any> 'online',
        Swipe = <any> 'swipe'
    }
    export enum ObjectEnum {
        IssuingAuthorization = <any> 'issuing.authorization'
    }
    export enum StatusEnum {
        Closed = <any> 'closed',
        Pending = <any> 'pending',
        Reversed = <any> 'reversed'
    }
}
