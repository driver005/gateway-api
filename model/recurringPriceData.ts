/**
 * Stripe API
 * The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2022-11-15
 * Contact: dev-platform@stripe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { RecurringAdhoc } from './recurringAdhoc';

/**
* Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline.
*/
export class RecurringPriceData {
    /**
    * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
    'currency': string;
    /**
    * The ID of the product that this price will belong to.
    */
    'product': string;
    'recurring': RecurringAdhoc;
    /**
    * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
    */
    'taxBehavior'?: RecurringPriceData.TaxBehaviorEnum;
    /**
    * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
    */
    'unitAmount'?: number;
    /**
    * Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
    */
    'unitAmountDecimal'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "product",
            "baseName": "product",
            "type": "string"
        },
        {
            "name": "recurring",
            "baseName": "recurring",
            "type": "RecurringAdhoc"
        },
        {
            "name": "taxBehavior",
            "baseName": "tax_behavior",
            "type": "RecurringPriceData.TaxBehaviorEnum"
        },
        {
            "name": "unitAmount",
            "baseName": "unit_amount",
            "type": "number"
        },
        {
            "name": "unitAmountDecimal",
            "baseName": "unit_amount_decimal",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return RecurringPriceData.attributeTypeMap;
    }
}

export namespace RecurringPriceData {
    export enum TaxBehaviorEnum {
        Exclusive = <any> 'exclusive',
        Inclusive = <any> 'inclusive',
        Unspecified = <any> 'unspecified'
    }
}
